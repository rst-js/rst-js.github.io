{"version":3,"sources":["webpack:///./src/ui/Container.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/ui/icons.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Container","styled","div","_templateObject","media","md","_templateObject2","lg","_templateObject3","React","createContext","PropTypes","object","string","isRequired","func","config","autoAddCss","library","add","faGithub","icon","GitHub","props","react","react_fontawesome_index_es","Object","assign","__webpack_exports__","Card","HeroContainer","Logo","aria-hidden","Heading","gatsby_link_default","a","to","Demo","source","transformed","Footer","pages_templateObject","pages_templateObject2","sm","pages_templateObject3","h1","_templateObject4","_templateObject5","_templateObject6","_templateObject7","grey","footer","_templateObject8","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","json","propTypes","shape"],"mappings":"oaAGO,IAAMA,EAAYC,IAAOC,IAAVC,IAElBC,IAAMC,GAFYC,KAEOF,IAAMG,GAFbC,8CCUKC,IAAMC,cAAc,IAuDvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,yCC7DtBC,IAAOC,YAAa,EAEpBC,IAAQC,IAAIC,KAQL,IAJWC,EAILC,GAJKD,EAIa,CAAC,MAAO,UAH9B,SAACE,GAAD,OAAsBC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAqBJ,EAArB,CAA4BF,KAAMA,giDCTlDO,EAAA,0BACbJ,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACK,EAAD,KACEL,EAAA,cAACM,EAAD,KACEN,EAAA,cAACO,EAAD,CAAMC,eAAA,GAAN,QAEAR,EAAA,cAACS,EAAD,wCAEAT,EAAA,cAACU,EAAAC,EAAD,CAAMC,GAAG,UAAT,mBAIJZ,EAAA,cAACa,EAAD,KACEb,EAAA,sDACAA,EAAA,cAACK,EAAD,KACEL,EAAA,yBAAMc,IAGRd,EAAA,uDAEAA,EAAA,cAACK,EAAD,KACEL,EAAA,yBAAMe,KAIVf,EAAA,cAACgB,EAAD,KACEhB,EAAA,qEACAA,EAAA,cAACU,EAAAC,EAAD,CAAMC,GAAG,oCACPZ,EAAA,cAACF,EAAD,MADF,cA3BS,IAkCTO,EAAO5B,IAAOC,IAAVuC,KAIJX,EAAgB7B,YAAOD,EAAPC,CAAHyC,IAMftC,IAAMuC,GANSC,MAcbX,EAAUhC,IAAO4C,GAAVC,KAMPf,EAAO9B,IAAOC,IAAV6C,KAeJV,EAAOpC,YAAOD,EAAPC,CAAH+C,IAGN5C,IAAMuC,GAHAM,KAoBGC,IAAK,MAKZV,EAASvC,IAAOkD,OAAVC,IAMDF,IAAK,KAKHA,IAAK,MAIZZ,EAAM,yZAUNC,EAAW,qhBCnIjB,IAAsBc,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIEpD,IAAMwD,cAAcC,IAApBxC,OAAAC,OAAA,CACLiC,WACAC,iBACGA,EAAcM,OANV,MAUXT,EAAiBU,UAAY,CAC3BR,SAAUjD,IAAU0D,MAAM,CACxBL,SAAUrD,IAAUE,OAAOC,aAC1BA,YAGU4C","file":"component---src-pages-index-tsx-e5e6206546850a50741a.js","sourcesContent":["import styled from \"@emotion/styled\"\nimport { media } from \"ui/styles\"\n\nexport const Container = styled.div`\n  max-width: 100vw;\n  ${media.md`width: 90%;`} ${media.lg`max-width: 1260px;`}\n  \n  margin: 0 auto;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import * as React from \"react\"\nimport { config, IconProp, library } from \"@fortawesome/fontawesome-svg-core\"\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\"\nimport {\n  FontAwesomeIcon,\n  Props as FaIconProps\n} from \"@fortawesome/react-fontawesome\"\nimport { Omit } from \"utility-types\"\n\n// css is added manually in pages/_document.tsx\nconfig.autoAddCss = false\n\nlibrary.add(faGithub)\n\ntype IconProps = Omit<FaIconProps, \"icon\">\n\nfunction makeIcon(icon: IconProp): React.ComponentType<IconProps> {\n  return (props: IconProps) => <FontAwesomeIcon {...props} icon={icon} />\n}\n\nexport const GitHub = makeIcon([\"fab\", \"github\"])\n","import * as React from \"react\"\nimport styled from \"@emotion/styled\"\n\nimport { Container } from \"ui/Container\"\nimport { grey, media } from \"ui/styles\"\nimport { Link } from \"gatsby\"\nimport { GitHub } from \"ui/icons\"\n\nexport default () => (\n  <>\n    <Card>\n      <HeroContainer>\n        <Logo aria-hidden>reST</Logo>\n\n        <Heading>reStructuredText for JavaScript</Heading>\n\n        <Link to=\"/docs/\">Documentation</Link>\n      </HeroContainer>\n    </Card>\n\n    <Demo>\n      <h2>Extensible markup language</h2>\n      <Card>\n        <pre>{source}</pre>\n      </Card>\n\n      <h2>Rendered as React component</h2>\n\n      <Card>\n        <pre>{transformed}</pre>\n      </Card>\n    </Demo>\n\n    <Footer>\n      <span>\"reStructuredText\" is ONE word, not two</span>\n      <Link to=\"https://github.com/rst-js/rst-js\">\n        <GitHub /> GitHub\n      </Link>\n    </Footer>\n  </>\n)\n\nconst Card = styled.div`\n  background-color: #fff;\n`\n\nconst HeroContainer = styled(Container)`\n  padding: 24px;\n  margin-bottom: 24px;\n  display: grid;\n  grid-row-gap: 48px;\n\n  ${media.sm`\n    padding: 64px;\n    grid-row-gap: 64px;\n  `}\n\n  justify-items: center;\n`\n\nconst Heading = styled.h1`\n  font-size: 24px;\n  line-height: 1.4;\n  text-align: center;\n`\n\nconst Logo = styled.div`\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n\n  font-size: 40px;\n  font-weight: bold;\n  text-align: right;\n\n  background-color: #f8e100;\n`\n\nconst Demo = styled(Container)`\n  display: grid;\n\n  ${media.sm`\n    grid-template-rows: repeat(2, max-content);\n    grid-template-columns: repeat(2, 1fr);\n    grid-auto-flow: column;\n    grid-column-gap: 24px;\n    grid-row-gap: 16px;\n  `}\n\n  h2 {\n    font-weight: bold;\n    line-height: 2;\n  }\n\n  pre {\n    padding: 24px;\n    font-family: monospace;\n    line-height: 1.5;\n    color: ${grey[\"800\"]};\n    white-space: pre-wrap;\n  }\n`\n\nconst Footer = styled.footer`\n  margin: 16px;\n  font-size: 14px;\n  text-align: center;\n  line-height: 2;\n\n  color: ${grey[\"600\"]};\n\n  a {\n    display: block;\n    text-decoration: none;\n    color: ${grey[\"800\"]};\n  }\n`\n\nconst source = `===============================\nreStructuredText for JavaScript\n===============================\n\nreStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax \\\nand parser system. It is useful for in-line code documentation, \\\nfor quickly creating simple web pages, and for standalone documents. reStructuredText is \\\ndesigned for extensibility for specific application domains.\n`\n\nconst transformed = `export default () => (\n  <Document>\n    <Section depth={1}>\n      <Title>reStructuredText for JavaScript</Title>\n      \n      <Paragraph>\n        reStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax \\\nand parser system. It is useful for in-line code documentation, \\\nfor quickly creating simple web pages, and for standalone documents. reStructuredText is \\\ndesigned for extensibility for specific application domains.\n      </Paragraph>\n    </Section>\n  </Document>\n)`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}